{"version":3,"sources":["../src/promisify.js"],"names":[],"mappings":"AAAA;;;;;;;;IAGM,UACJ,SADI,OACJ,CAAY,OAAZ,EAAqB,MAArB,EAA6B,MAA7B,EAAqC;wBADjC,SACiC;;AACnC,OAAK,OAAL,GAAe,OAAf,CADmC;AAEnC,OAAK,MAAL,GAAc,MAAd,CAFmC;AAGnC,OAAK,MAAL,GAAc,MAAd,CAHmC;CAArC;;AAOF,IAAM,WAAW,SAAX,QAAW,GAAa;oCAAT;;GAAS;;AAC5B,MAAM,UAAU,KAAK,KAAL,EAAV,CADsB;AAE5B,MAAM,QAAQ,KAAK,KAAL,EAAR,CAFsB;;AAI5B,SAAO,KAAK,MAAL,GAAc,CAAd,GAAkB,IAAlB,GAAyB,KAAK,CAAL,CAAzB,CAJqB;;AAM5B,MAAI,OAAO,QAAQ,MAAR,KAAmB,UAA1B,EAAsC;;AACxC,UAAM,SAAS,SAAT,MAAS,GAAmB;2CAAf;;SAAe;;;;;AAIhC,eAAO,QAAQ,MAAR,CAAe,KAAf,CAAqB,MAArB,EAA6B,UAA7B,CAAP,CAJgC;OAAnB;AAMf,aAAO,OAAP,GAAiB,QAAQ,OAAR;AACjB,aAAO,MAAP,GAAgB,QAAQ,MAAR;AAChB,+BAAO,cAAU,KAAjB;AACA;;;QAVwC;;;GAA1C;;AAaA,MAAI,KAAJ,EAAW;AACT,WAAO,QAAQ,MAAR,CAAe,KAAf,CAAP,CADS;GAAX;AAGA,SAAO,QAAQ,OAAR,CAAgB,IAAhB,CAAP,CAtB4B;CAAb;;;;;;;;;;;;;;;AAsCjB,OAAO,OAAP,GAAiB,UAAC,QAAD,EAAW,MAAX,EAAsB;AACrC,SAAO,YAAmB;uCAAN;;KAAM;;;AAExB,QAAM,OAAO,IAAP;;;AAFkB,WAKjB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;;;AAGtC,UAAM,UAAU,IAAI,OAAJ,CAAY,OAAZ,EAAqB,MAArB,EAA6B,MAA7B,CAAV;;;AAHgC,UAMtC,CAAK,IAAL,CAAU,SAAS,IAAT,CAAc,IAAd,EAAoB,OAApB,CAAV;;;AANsC,aAS/B,SAAS,IAAT,kBAAc,aAAS,KAAvB,CAAP,CATsC;KAArB,CAAnB,CALwB;GAAnB,CAD8B;CAAtB","file":"promisify.js","sourcesContent":["\"use strict\";\n\n// Promise Context object constructor.\nclass Context {\n  constructor(resolve, reject, custom) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.custom = custom;\n  }\n}\n\nconst callback = (...args) => {\n  const context = args.shift();\n  const error = args.shift();\n\n  args = args.length > 1 ? args : args[0];\n\n  if (typeof context.custom === 'function') {\n    const custom = (...customArgs) => {\n      // Bind the callback to itself, so the resolve and reject\n      // properties that we bound are available to the callback.\n      // Then we push it onto the end of the arguments array.\n      return context.custom.apply(custom, customArgs);\n    };\n    custom.resolve = context.resolve;\n    custom.reject = context.reject;\n    custom(error, ...args);\n    return;\n  }\n\n  if (error) {\n    return context.reject(error);\n  }\n  return context.resolve(args);\n};\n\n/**\n * promisify\n *\n * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n * an ES6-compatible Promise. User can provide their own callback function; otherwise\n * promisify provides a callback of the form (error, result) and rejects on truthy error.\n * If supplying your own callback function, use this.resolve() and this.reject().\n *\n * @param {function} original - The function to promisify\n * @param {function} custom - Optional custom callback function\n *\n * @return {function} A promisified version of 'original'\n */\nmodule.exports = (original, custom) => {\n  return function (...args) {\n    // Store original context\n    const self = this;\n\n    // Return the promisified function\n    return new Promise((resolve, reject) => {\n\n      // Create a Context object\n      const context = new Context(resolve, reject, custom);\n\n      // Append the callback bound to the context\n      args.push(callback.bind(null, context));\n\n      // Call the function\n      return original.call(self, ...args);\n    });\n  };\n};\n"]}